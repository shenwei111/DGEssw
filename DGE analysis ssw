library(DESeq2)
library(tidyverse)
library(RColorBrewer)
library(pheatmap)
library(DEGreport)
library(tximport)
library(ggplot2)
library(ggrepel)
library(Matrix)
library(readr)
library(IHW)
library(pcaExplorer)
library(clusterProfiler)
library(ReactomePA)


# Read the CSV file
data <- read.csv("D:/project-1/data.csv", row.names = 1)  # Assuming row names are in the first column
dim(data)
 View(data)
# Convert the data frame to a numeric matrix
numeric_matrix <- data.matrix(data)

# Preserve row names and column names
rownames(numeric_matrix) <- rownames(data)
colnames(numeric_matrix) <- colnames(data)
data<-numeric_matrix
View(data)

## Create a sampletable/metadata
meta <- read.csv("D:/project-1/DEG/meta/meta.csv")
row_names <- as.character(unlist(meta[, 1]))
meta <- meta[, -1]
rownames(meta) <- row_names
View(meta)
# Convert the meta frame to a factor matrix
factor_matrix <- data.matrix(meta)

# Preserve row names and column names
rownames(factor_matrix) <- rownames(meta)
colnames(factor_matrix) <- colnames(meta)
meta<-factor_matrix
View(meta)

ggplot(data) +
  geom_histogram(aes(x = X71_W0), stat = "bin", bins = 200) +
  xlab("Raw expression counts") +
  ylab("Number of genes")

## Create DESeq2Dataset object
dim(data)
dim(meta)
# Get the row names (sample names) of your metadata
sample_names_meta <- rownames(meta)

# Reorder the column names of your count data to match the order of sample_names_meta
data <- data[, match(sample_names_meta, colnames(data))]

any(data < 0)
# Set negative values in the count data to zero
data[data < 0] <- 0

# Check if there are still negative values
any(data < 0)

# Check the mode of the count data
mode(data)

# Check the mode of row names
mode(rownames(data))
dds <- DESeqDataSetFromMatrix(data, colData = meta, design = ~ Group+Treatment)

View(counts(dds))
dds <- estimateSizeFactors(dds)
sizeFactors(dds)
normalized_counts <- counts(dds, normalized=TRUE)
write.table(normalized_counts, file="data/normalized_counts.txt", sep="\t", quote=F, col.names=NA)


### Transform counts for data visualization
rld <- rlog(dds, blind=TRUE, fitType='local')
### Plot PCA 
plotPCA(rld, intgroup="Group")
# Input is a matrix of log transformed values
rld <- rlog(dds, blind=T)
rld_mat <- assay(rld)
pca <- prcomp(t(rld_mat))

# Create data frame with metadata and PC3 and PC4 values for input to ggplot
df <- cbind(meta, pca$x)
ggplot(df) + geom_point(aes(x=PC3, y=PC4, color = Group))

### Extract the rlog matrix from the object
rld_mat <- assay(rld)    

## "assay()" is part of the "SummarizedExperiment" package which is a DESeq2 dependency and is loaded with the DESeq2 library
### Compute pairwise correlation values
rld_cor <- cor(rld_mat)    ## cor() is a base R function
## check the output of cor(), make note of the row names and column names
head(rld_cor)

head(meta)
### Load pheatmap package
library(pheatmap)

# Match the row names of the correlation matrix with the row names of the metadata
ordered_samples <- rownames(meta)

# Reorder the correlation matrix based on the order of samples in the metadata
rld_cor_ordered <- rld_cor[ordered_samples, ordered_samples]

# Plot the heatmap using the ordered correlation matrix and metadata
# Plot the heatmap without clustering rows and columns
pheatmap(rld_cor_ordered, annotation = meta, color = heat.colors, 
         border_color = NA, fontsize = 10, fontsize_row = 10, height = 20,
         cluster_rows = FALSE, cluster_cols = FALSE)

## Run analysis
dds <- DESeqDataSetFromMatrix(data, colData = meta, design = ~ Group+Treatment)
dds <- DESeq(dds)

## Check the size factors
sizeFactors(dds)
## Total number of raw counts per sample
colSums(counts(dds))
## Total number of normalized counts per sample
colSums(counts(dds, normalized=T))
# Plot dispersion estimates
plotDispEsts(dds)

## Define contrasts for MOV10 overexpression
contrast_oe <- c("Group", "PCOS", "ctrl")
## Extract results for MOV10 overexpression vs control
res_tableOE <- results(dds, contrast=contrast_oe, alpha = 0.05)
# Check what type of object is returned
class(res_tableOE)

# What is stored in results?
res_tableOE %>% 
  data.frame() %>% 
  View()
# Get information on each column in results
mcols(res_tableOE, use.names=T)
# Filter genes by zero expression
res_tableOE[which(res_tableOE$baseMean == 0),] %>% 
  data.frame() %>% 
  View()
# Filter genes that have an extreme outlier
res_tableOE[which(is.na(res_tableOE$pvalue) & 
                    is.na(res_tableOE$padj) &
                    res_tableOE$baseMean > 0),] %>% 
  data.frame() %>% 
  View()
# Filter genes below the low mean threshold
res_tableOE[which(!is.na(res_tableOE$pvalue) & 
                    is.na(res_tableOE$padj) & 
                    res_tableOE$baseMean > 0),] %>% 
  data.frame() %>% 
  View()
## Save the unshrunken results to compare
res_tableOE_unshrunken <- res_tableOE

# Apply fold change shrinkage
res_tableOE <- lfcShrink(dds, coef="Group_PCOS_vs_ctrl", type="apeglm")

# MA plot using shrunken fold changes
plotMA(res_tableOE, ylim=c(-2,2))

## Summarize results
summary(res_tableOE, alpha = 0.05)
### Set thresholds
padj.cutoff <- 0.05
# Create a tibble of results
res_tableOE_tb <- res_tableOE %>%
  data.frame() %>%
  rownames_to_column(var="gene") %>% 
  as_tibble()
# Subset the tibble to keep only significant genes
sigOE <- res_tableOE_tb %>%
  dplyr::filter(padj < padj.cutoff)
# Take a quick look at this tibble
sigOE

library(tibble)

# Convert 'meta' to a tibble with sample names as a new column "samplename"
mov10_meta <- meta %>%
  rownames_to_column(var = "samplename") %>%
  as_tibble()

# Get normalized counts
normalized_counts <- counts(dds, normalized = TRUE)

# Convert normalized counts to a data frame and add row names as a new column named "gene"
normalized_counts_df <- as.data.frame(normalized_counts)
normalized_counts_df$gene <- rownames(normalized_counts)

# Convert to a tibble
normalized_counts_tbl <- as_tibble(normalized_counts_df)
View(normalized_counts_tbl)

# Plot expression for single gene
plotCounts(dds, gene="ENSG00000000005.6", intgroup="Treatment") 

# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000000005.6", intgroup="Treatment", returnData=TRUE)

# What is the data output of plotCounts()?
d %>% View()

# Plot the MOV10 normalized counts, using the samplenames (rownames(d) as labels)
ggplot(d, aes(x = Treatment, y = count, color = Treatment)) + 
  geom_point(position=position_jitter(w = 0.1,h = 0)) +
  geom_text_repel(aes(label = rownames(d))) + 
  theme_bw() +
  ggtitle("ENSG00000000005.6") +
  theme(plot.title = element_text(hjust = 0.5))

View(normalized_counts)
### Extract normalized expression for significant genes from the OE and control samples (1:5 and 6:11)
colnames(normalized_counts_tbl)
library(dplyr)

# Filter normalized counts for significant genes
norm_PCOSsig <- normalized_counts_tbl %>%
  filter(gene %in% sigOE) %>%
  select(1:5, 6:11)
print(norm_PCOSsig)

### Set a color palette
heat_colors <- brewer.pal(6, "YlOrRd")

### Run pheatmap using the metadata data frame for the annotation
# Check for missing or infinite values in norm_PCOSsig
if (any(is.infinite(norm_PCOSsig)) || any(is.na(norm_PCOSsig))) {
  stop("Missing or infinite values detected in 'norm_PCOSsig'. Please handle or remove them before proceeding.")
}
# Check the structure of norm_PCOSsig
str(norm_PCOSsig)
pheatmap(norm_PCOSsig[1:11], 
         color = heat_colors, 
         cluster_rows = T, 
         show_rownames = F,
         annotation = meta, 
         border_color = NA, 
         fontsize = 10, 
         scale = "row", 
         fontsize_row = 10, 
         height = 20)

## Obtain logical vector where TRUE values denote padj values < 0.05 and fold change > 1.5 in either direction

res_tableOE_tb <- res_tableOE_tb %>% 
  dplyr::mutate(threshold_OE = padj < 0.05 & abs(log2FoldChange) >= 0.58)

## Create an empty column to indicate which genes to label
res_tableOE_tb <- res_tableOE_tb %>% dplyr::mutate(genelabels = "")

## Sort by padj values 
res_tableOE_tb <- res_tableOE_tb %>% dplyr::arrange(padj)

## Populate the genelabels column with contents of the gene symbols column for the first 10 rows, i.e. the top 10 most significantly expressed genes
res_tableOE_tb$genelabels[1:10] <- as.character(res_tableOE_tb$gene[1:10])

View(res_tableOE_tb)
ggplot(res_tableOE_tb, aes(x = log2FoldChange, y = -log10(padj))) +
  geom_point(aes(colour = threshold_OE)) +
  geom_text_repel(aes(label = genelabels)) +
  ggtitle("PCOS") +
  xlab("log2 fold change") + 
  ylab("-log10 adjusted p-value") +
  theme(legend.position = "none",
        plot.title = element_text(size = rel(1.5), hjust = 0.5),
        axis.title = element_text(size = rel(1.25)))


# Differential expression analysis with DESeq2
ddss <- DESeqDataSetFromMatrix(data, colData = meta, design = ~ Group+Treatment)
ddss <- DESeq(ddss)
ress <- results(ddss)
library(org.Hs.eg.db)
# Functional enrichment analysis
de_genes <- rownames(subset(ress, padj < 0.05 & abs(log2FoldChange) > 1))
# Perform GO enrichment analysis
go_enrichment <- enrichGO(
  gene          = de_genes,
  OrgDb         = org.Hs.eg.db,
  ont           = "BP",  # Biological Process ontology
  pvalueCutoff  = 0.05,
  qvalueCutoff  = 0.05,
  readable      = TRUE
)

# View the top enriched GO terms
head(go_enrichment)

# Multiple testing correction
# Correct p-values using the interactive Benjamini-Hochberg method
enrichment_result <- ihw(go_enrichment)

# Perform functional enrichment analysis using ReactomePA
reactome <- enrichPathway(gene = rownames(ress),
                          universe = rownames(exprData),
                          qvalueCutoff = 0.05)

# Visualize the results
barplot(reactome)




