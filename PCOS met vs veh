## Gene-level differential expression analysis using DESeq2
## Setup
### Bioconductor and CRAN libraries used
library(DESeq2)
library(tidyverse)
library(RColorBrewer)
library(pheatmap)
library(DEGreport)
library(tximport)
library(ggplot2)
library(ggrepel)
library(Matrix)
library(readr)
library(IHW)
library(pcaExplorer)
library(clusterProfiler)
library(ReactomePA)
library(tibble)
library(org.Hs.eg.db)
library(org.Mm.eg.db)

# data create
data <- read.csv("data/merged_data.csv",row.names=1)
 View(data)
numeric_matrix <- data.matrix(data)
rownames(numeric_matrix) <- rownames(data)
colnames(numeric_matrix) <- colnames(data)
data<-numeric_matrix
View(data)
#meta create
meta <- read.csv("lib/meta.csv", row.names = 1)
View(meta)
sample_names_meta <- rownames(meta)
data <- data[, match(sample_names_meta, colnames(data))]
# ensemble IDs and gene names
ensemble_ids <- rownames(data)
ensemble_ids <- sub("\\..*", "", ensemble_ids)
gene_symbols <- mapIds(org.Hs.eg.db, keys = ensemble_ids, column = "SYMBOL", keytype = "ENSEMBL")
tx2gene<- data.frame(Ensembl_ID = rownames(data), Gene_Symbol = gene_symbols)
View(tx2gene)
## Create DESeq2Dataset object
View(data)
any(data < 0)
data <- data[complete.cases(data), ]
any(data < 0)
dds <- DESeqDataSetFromMatrix(data, colData = meta, design = ~ Treatment)
keep<-rowSums(counts(dds)) >=10
dds<-dds[keep,]
print(dds)
View(dds)
View(counts(dds))

## Run analysis
dds <- DESeq(dds)
resultsNames(dds)
## Check the size factors
sizeFactors(dds)
colSums(counts(dds))
colSums(counts(dds, normalized=T))
# Plot dispersion estimates
plotDispEsts(dds)

## Define contrasts for MOV10 overexpression
contrast_oe <- c("Treatment", "met", "veh")
res_tableOE <- results(dds, contrast=contrast_oe, alpha = 0.05)
class(res_tableOE)
res_tableOE %>% 
  data.frame() %>% 
  View()
res_tableOE_unshrunken <- res_tableOE

# Apply fold change shrinkage
resultsNames(dds)
res_tableOE <- lfcShrink(dds, coef="Treatment_veh_vs_met", type="apeglm")
plotMA(res_tableOE, ylim=c(-2,2))

## Summarize results
summary(res_tableOE, alpha = 0.05)
### Set thresholds
padj.cutoff <- 0.05
# Create a tibble of results
res_tableOE_tb <- res_tableOE %>%
  data.frame() %>%
  rownames_to_column(var="gene") %>% 
  as_tibble()
# Subset the tibble to keep only significant genes
sigOE <- res_tableOE_tb %>%
  dplyr::filter(padj < padj.cutoff)
get_gene_name <- function(ensembl_id) {
  gene_name <- tx2gene$Gene_Symbol[tx2gene$Ensembl_ID == ensembl_id]
  return(gene_name)
}
sigOE <- sigOE %>%
  mutate(gene_name = sapply(gene, get_gene_name))
# Take a quick look at this tibble
sigOE


##DESeq2 creates a matrix when you use the counts() function
## First convert normalized_counts to a data frame and transfer the row names to a new column called "gene"
normalized_counts <- counts(dds, normalized=T) %>% 
  data.frame() %>%
  rownames_to_column(var="gene") 

# Next, merge together (ensembl IDs) the normalized counts data frame with a subset of the annotations in the tx2gene data frame (only the columns for ensembl gene IDs and gene symbols)
grch38annot <- tx2gene %>% 
  dplyr::select(Ensembl_ID, Gene_Symbol) %>% 
  dplyr::distinct()

## This will bring in a column of gene symbols
normalized_counts <- merge(normalized_counts, grch38annot, by.x="gene", by.y="Ensembl_ID")

# Now create a tibble for the normalized counts
normalized_counts <- normalized_counts %>%
  as_tibble()

normalized_counts 
###Expression plot
ensembl_id <- "ENSG00000000457.14"  # Example Ensembl ID
gene_name <- tx2gene[tx2gene$Ensembl_ID == ensembl_id, "Gene_Symbol"]
d <- plotCounts(dds, gene = ensembl_id, intgroup = "Treatment", returnData = TRUE)
ggplot(d, aes(x = Treatment, y = count, color = Treatment)) + 
  geom_point(position = position_jitter(w = 0.1, h = 0)) +
  geom_text_repel(aes(label = rownames(d))) + 
  theme_bw() +
  ggtitle(paste("Gene:", gene_name)) +  # Set the title with gene name
  theme(plot.title = element_text(hjust = 0.5))
###heatmap
View(normalized_counts)
### Extract normalized expression for significant genes from the OE and control samples (1:5 and 6:11)
colnames(normalized_counts)
library(dplyr)
norm_PCOSsig <- normalized_counts %>%
  semi_join(sigOE, by = "gene")

print(norm_PCOSsig)

heat_colors <- brewer.pal(6, "YlOrRd")

col_order <- colnames(norm_PCOSsig[23:32])

# Create the heatmap with specified column order
pheatmap(norm_PCOSsig[23:32], 
         color = heat_colors, 
         cluster_rows = FALSE,  
         cluster_cols = FALSE,  
         show_rownames = FALSE,
         show_colnames = T,  
         annotation = meta, 
         border_color = NA, 
         fontsize = 10, 
         scale = "row", 
         fontsize_row = 10, 
         height = 20)
## Obtain logical vector where TRUE values denote padj values < 0.05 and fold change > 1.5 in either direction
res_tableOE_tb <- res_tableOE_tb %>% 
  dplyr::mutate(threshold_OE = padj < 0.05 & abs(log2FoldChange) >= 0.58)
res_tableOE_tb <- bind_cols(res_tableOE_tb, symbol=grch38annot$Gene_Symbol[match(res_tableOE_tb$gene, grch38annot$Ensembl_ID)])
res_tableOE_tb <- res_tableOE_tb %>% dplyr::mutate(genelabels = "")
res_tableOE_tb <- res_tableOE_tb %>% dplyr::arrange(padj)
res_tableOE_tb$genelabels[1:10] <- as.character(res_tableOE_tb$symbol...9[1:10])

View(res_tableOE_tb)
ggplot(res_tableOE_tb, aes(x = log2FoldChange, y = -log10(padj))) +
  geom_point(aes(colour = threshold_OE)) +
  geom_text_repel(aes(label = genelabels)) +
  ggtitle("PCOS patient treat with metformin") +
  xlab("log2 fold change") + 
  ylab("-log10 adjusted p-value") +
  theme(legend.position = "none",
        plot.title = element_text(size = rel(1.5), hjust = 0.5),
        axis.title = element_text(size = rel(1.25)))


## Create an empty column to indicate which genes to label
res_tableOE_tb <- res_tableOE_tb %>% dplyr::mutate(genelabels = "")

## Sort by padj values 
res_tableOE_tb <- res_tableOE_tb %>% dplyr::arrange(padj)

## Populate the genelabels column with contents of the gene symbols column for the first 10 rows, i.e. the top 10 most significantly expressed genes
res_tableOE_tb$genelabels[1:10] <- as.character(res_tableOE_tb$gene[1:10])

View(res_tableOE_tb)
ggplot(res_tableOE_tb, aes(x = log2FoldChange, y = -log10(padj))) +
  geom_point() +
  geom_text_repel(aes(label = genelabels)) +
  ggtitle("PCOS vs ctrl") +
  xlab("log2 fold change") + 
  ylab("-log10 adjusted p-value") +
  theme(legend.position = "none",
        plot.title = element_text(size = rel(1.5), hjust = 0.5),
        axis.title = element_text(size = rel(1.25)))

# Functional enrichment analysis
de_genes <- rownames(subset(res, padj < 0.05 & abs(log2FoldChange) > 1))
# Perform GO enrichment analysis
go_enrichment <- enrichGO(
  gene          = de_genes,
  OrgDb         = org.Hs.eg.db,
  ont           = "BP",  # Biological Process ontology
  pvalueCutoff  = 0.05,
  qvalueCutoff  = 0.05,
  readable      = TRUE
)

# View the top enriched GO terms
head(go_enrichment)

# Multiple testing correction
# Correct p-values using the interactive Benjamini-Hochberg method
enrichment_result <- ihw(go_enrichment)

# Perform functional enrichment analysis using ReactomePA
reactome <- enrichPathway(gene = rownames(ress),
                          universe = rownames(exprData),
                          qvalueCutoff = 0.05)

# Visualize the results
barplot(reactome)




